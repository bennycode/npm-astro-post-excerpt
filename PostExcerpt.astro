---
import { MarkdownInstance } from 'astro'

export interface Props {
  /**
   * The post whose excerpt you want to generate and render. If this prop is not supplied or not valid, the component will render an empty string.
   */
  post: MarkdownInstance<Record<string, any>>
  /**
   * The number of words the generated excerpt should have in total. Be aware that the prop `maxLength` has precedence over this prop but you can use both props simultaneously. Defaults to **40**.
   */
  words?: number
  /**
   * Max length of the generated excerpt. Be aware that this prop has precedence over the `words` prop but you can use both props simultaneously. Defaults to **0** (unlimited).
   */
  maxLength?: number
  /**
   * Controls whether horizontal ellipsis "…" should be appended to the post excerpt. Defaults to **true**.
   */
  addEllipsis?: boolean
}

let { post, words = 40, maxLength = 0, addEllipsis = true } = Astro.props
let postText = ''

if (!post || typeof post['compiledContent'] !== 'function') {
	throw new TypeError('The required prop post is not valid, aborting now.')
}

if (typeof words !== 'number' || words < 0) {
  words = 40
  console.warn('The optional prop words is not valid, defaulting to 40.')
}

if (typeof maxLength !== 'number' || maxLength < 0) {
  maxLength = 0
  console.warn('The optional prop maxLength is not valid, defaulting to 0.')
}

if (typeof addEllipsis !== 'boolean') {
  addEllipsis = true
  console.warn('The optional prop addEllipsis is not valid, defaulting to true.')
}

const postHtml = post.compiledContent()

postText = postHtml.replace(/<[^>]*>?/gm, '')

if (words > 0) {
  postText = postText.split(' ').slice(0, words).join(' ')
}

if (maxLength > 0) {
  postText = postText.substring(0, maxLength)
}

if (addEllipsis) {
  postText += '…'
}
---

<Fragment set:text={postText} />
